package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.Servo;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;

@Autonomous(name = "AutonomousTabara (Blocks to Java)", group = "")
public class AutonomousTabara extends LinearOpMode {

  private Servo ServodreaptaNA;
  private DcMotor MotorsasiuSTANGA;
  private DcMotor MotorsasiuDREAPTA;
  private DcMotor MotorRIDICARECuva;
  private DistanceSensor sensorRange;
  int Distance;

  /**
   * This function is executed when this Op Mode is selected from the Driver Station.
   */
  @Override
  public void runOpMode() {
    ServodreaptaNA = hardwareMap.servo.get("Servo-dreapta-NA");
    MotorsasiuSTANGA = hardwareMap.dcMotor.get("Motor-sasiu-STANGA");
    MotorsasiuDREAPTA = hardwareMap.dcMotor.get("Motor-sasiu-DREAPTA");
    MotorRIDICARECuva = hardwareMap.dcMotor.get("Motor-RIDICARE-Cuva");
    sensorRange = hardwareMap.get(DistanceSensor.class, "SenzorDistanta");

    // Put initialization blocks here.
    ServodreaptaNA.setPosition(-0.8);

    Rev2mDistanceSensor sensorTimeOfFlight = (Rev2mDistanceSensor)sensorRange;

    telemetry.addData(">>", "Press start to continue");
    telemetry.update();
    waitForStart();
    if (opModeIsActive()) {
      // Put run blocks here.
      while (opModeIsActive()) {
        /*MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(1700);
        MotorRIDICARECuva.setPower(-0.7);
        sleep(400);
        MotorRIDICARECuva.setPower(0.6);
        sleep(450);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(600);
        MotorsasiuSTANGA.setPower(1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(1400);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(800);
        MotorsasiuSTANGA.setPower(1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(300);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(900);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(-1);
        sleep(300);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(300);
        MotorsasiuSTANGA.setPower(1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(100);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(1);
        sleep(2000);
        MotorsasiuSTANGA.setPower(-1);
        MotorsasiuDREAPTA.setPower(0.89);
        sleep(900);
        MotorRIDICARECuva.setPower(-1);
        sleep(400);
        if (!MotorsasiuSTANGA.isBusy()) {
          return;
        }*/
        telemetry.addData("deviceName",sensorRange.getDeviceName() );
        telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));
        telemetry.addData("range", String.format("%.01f cm", sensorRange.getDistance(DistanceUnit.CM)));
        telemetry.addData("range", String.format("%.01f m", sensorRange.getDistance(DistanceUnit.METER)));
        telemetry.addData("range", String.format("%.01f in", sensorRange.getDistance(DistanceUnit.INCH)));


        Rev2mDistanceSensor specificmethods;
        telemetry.addData("ID", String.format("%x", sensorTimeOfFlight.getModelID()));
        telemetry.addData("did time out", Boolean.toString(sensorTimeOfFlight.didTimeoutOccur()));
        telemetry.update();
        if (sensorRange)
        idle();
      }
    }
  }
}
