
package org.firstinspires.ftc.teamcode;

import com.qualcomm.hardware.rev.Rev2mDistanceSensor;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DistanceSensor;

import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;


/**
 * This file contains an minimal example of a Linear "OpMode". An OpMode is a 'program' that runs in either
 * the autonomous or the teleop period of an FTC match. The names of OpModes appear on the menu
 * of the FTC Driver Station. When an selection is made from the menu, the corresponding OpMode
 * class is instantiated on the Robot Controller and executed.
 *
 * This particular OpMode just executes a basic Tank Drive Teleop for a two wheeled robot
 * It includes all the skeletal structure that all linear OpModes contain.
 *
 * Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
 * Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
 */

@Autonomous(name="Autonom senzor distanta", group="")
public class AutonomSenzorDistanta extends LinearOpMode {

    private DcMotor MotorsasiuSTANGA;
    private DcMotor MotorsasiuDREAPTA;
    private DistanceSensor sensorRange;


    @Override
    public void runOpMode() {
        telemetry.addData("Status", "Initialized");
        telemetry.update();
        MotorsasiuSTANGA = hardwareMap.dcMotor.get("Motor-sasiu-STANGA");
        MotorsasiuDREAPTA = hardwareMap.dcMotor.get("Motor-sasiu-DREAPTA");
        sensorRange = hardwareMap.get(DistanceSensor.class, "SenzorDistanta");
        Rev2mDistanceSensor sensorTimeOfFlight = (Rev2mDistanceSensor)sensorRange;

       waitForStart();
        while (opModeIsActive()) {
            MotorsasiuSTANGA.setPower(-1);
            MotorsasiuDREAPTA.setPower(1);

            telemetry.addData("deviceName",sensorRange.getDeviceName() );
            telemetry.addData("range", String.format("%.01f mm", sensorRange.getDistance(DistanceUnit.MM)));
            telemetry.addData("range", String.format("%.01f cm", sensorRange.getDistance(DistanceUnit.CM)));
            telemetry.addData("range", String.format("%.01f m", sensorRange.getDistance(DistanceUnit.METER)));
            telemetry.addData("range", String.format("%.01f in", sensorRange.getDistance(DistanceUnit.INCH)));


            Rev2mDistanceSensor specificmethods;
            telemetry.update();
            if (sensorRange.getDistance(DistanceUnit.CM)<100){
                MotorsasiuSTANGA.setPower(1);
                MotorsasiuDREAPTA.setPower(-1);
                sleep(1000);
                MotorsasiuDREAPTA.setPower(0.5);
                MotorsasiuSTANGA.setPower(0.5);
                sleep(10000);
            }
            return;

        }
    }
}
